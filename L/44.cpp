/**
  Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

  Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and 
  D = |Pk − Pj| is minimised; what is the value of D?
*/

#include <iostream>
#include <vector>
#include <cmath>

bool arePentNumbers(long, long);

int main() {
  /**
    For quadratic equations, of type, ax^2 + bx + c = 0, we have,
      x = (-b (+-) sqrt(b^2 - 4ac)) / 2a;
    In our case,
      3n^2 - n - 2P = 0
    So,
      n = (1 (+-) sqrt(1 - 4 * 3 * (-2P))) / (2 * 3)
      n = (1 (+-) sqrt(1 + 24P)) / 6
    Since, n is always positive,
      n = (1 + sqrt(1 + 24P)) / 6

    The above expression for n can be used to check if the P in the above expression is a pentagonal number.
    P will be a pentagonal number only if the value of n for a given value of P is an integer and not a fraction 
    since n represents the index / position of the pentagonal numbers and it is always an integer.
  */

  std::vector<long> pentNumbers;
  long pentDiff;
  bool flag = false;                    // To indicate that we have found the final pair satisfying the conditions.

  for(long i = 0; ; i++) {
    long pentSum;
    long nextPentNum = (i + 1) * (3 * (i + 1) - 1) / 2;
    pentNumbers.push_back(nextPentNum);
    if(i) {
      for(long k = pentNumbers.size() - 2; k >= 0; k--) {
        pentSum = pentNumbers[pentNumbers.size() - 1] + pentNumbers[k];
        pentDiff = pentNumbers[pentNumbers.size() - 1] - pentNumbers[k]; 
        if(arePentNumbers(pentSum, pentDiff)) {
          flag = true;
          break;
        }
      }
    }
    if(flag)
      break;
  }

  std::cout << "The value of D is: " << pentDiff << std::endl;
  return 0;
}

/**
  This function checks if the functional arguments are pentagonal numbers.
*/
bool arePentNumbers(long sum, long diff) {
  float index1 = (1 + sqrt(1 + 24 * sum)) / 6;
  float index2 = (1 + sqrt(1 + 24 * diff)) / 6;
  if(
      index1 - (int)index1 == 0 and
      index2 - (int)index2 == 0
    )
    return true;
  return false;
}